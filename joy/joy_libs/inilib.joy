(* 
 * inilib.joy - Joy language core as defined in: (where not implemented in C++)
 * 
 * [1] JOY manual - compiled at 16 : 57 : 51 on Mar 17 2003(BDW) Copyright 2001 by Manfred von Thun
 * [2] "Programming In Joy" By Manfred von Thun
 * [3] "Atomic Programs of Joy" by Manfred von Thun
 * [4] "Mathematical foundations of Joy" by Manfred von Thun
 *
 * Thus defined and termed the 'Joy Language core 2003' aka 'joy03'
 * N.B. All other libraries will ensure that this library is also loaded.
 *)

(* TODO: - C++
    
    [] rand 	Pushes random integer.
    [] srand	Sets the random integer
    [] gmtime
    [] mktime
    [] strftime
    [] strtol
    [] strtod
    [] format
    [] formatf
    [] compare   
    [] equal     
*)

PUBLIC

_inilib == true;

(* - - - - - Stack Manipulation Operators  - - - - *)

    dup2 == dup [[dup]dip swap] dip;
    rollupd == [rollup] dip;
    rolldownd == [rolldown] dip;
    rotated == [rotate] dip;

(* - - - - - List Operators  - - - - *)

    swons   == swap cons;   # A X -> B where aggregate B is A with a new member X (first member for sequences).
   
    unswons == uncons swap; # A -> R F where R and F are the rest and the first of non-empty aggregate A.

    first   == uncons pop;  # A -> F where F is the first member of the non-empty aggregate A.
    rest    == unswons pop; # A -> R where R is the non-empty aggregate A with its first member removed.

    (*
     * presented in "Programming In Joy" By Manfred von Thun - but not in joy03 manual
     * The shunt operator takes two sequences as parameters and, starting at the front of the topmost parameter, moves all items onto the front of the second parameter.
     *)
    shunt == [swons] step;   # [a b] [f] g|shunt   ->  |a f g b f g
    (*
     * presented in "Atomic Programs of Joy" by Manfred von Thun - but not in joy03 manual
     * swoncat concatenates two sequences of the same type, it appends the second parameter to the top parameter.
     * concat  does the same except that it executes a swap first.
     *) 
    swoncat == reverse shunt; 
    concat  == swap swoncat;
    enconcat == swapd cons concat;

(* - - - - - General Combinators  - - - - *)

    # joy03
    nullary == stack rest swap infra first; # [P] -> R Executes P, which leaves R on top of the stack. No matter how many parameters this consumes, none are removed from the stack.b
    unary == stack rest swap infra first popd; # X [P] -> R Executes P, which leaves R on top of the stack. No matter how many parameters this consumes, exactly one is removed from the stack
    branch == choice i; # B [T] [F] -> T/F If B is true, then executes T else executes F.

    (*
     * presented in "Atomic Programs of Joy" by Manfred von Thun - but not in joy03 manual
     * The dipd and the dipdd combinator are similar. They expect two or three elements, (X) and (Y), or (X), (Y) and (Z) below the quotation. The two or three elements are saved and restored after the execution of the quotation.
     *)    
    dipd    == [dip] cons dip;
    dipdd   == [dipd] cons dip;
    b == [i] dip i; # The b combinator expects two quotations [P] and [Q], with [Q] on top. It removes the two quotations and executes first [P] and then [Q].
    cleave == [nullary] dip swap [nullary] dip swap; # a [f] [g]|cleave   ->  |a f a g

    (* 
     * presented in "Mathematical foundations of Joy" by Manfred von Thun - but not in joy03 manual
     * The names of these combinators have been chosen because of their similarity to the K combinator, W combinator and the C combinator in combinatory logic.
     *)
        k   ==   [pop]  dip  i;
        w   ==   [dup]  dip  i;
        c   ==   [swap] dip  i;
    
    # joy03
    ifte == [ [stack] dip infra first ] dipd branch; #[B] [T] [F] -> ... Executes B. If that yields true, then executes T else executes F.
    app1 == i; # 	X [P] -> R Executes P, pushes result R on stack without X.
    app2 == dup rollup i [i] dip; # Obsolescent. == unary2
    app3 == dup rollup i [app2] dip; # Obsolescent. == unary3

    fold == swapd step; # [a b ...] i [f]|fold  ->   [f/i,a b ...]|

(* -----Joy 03 Boolean and Mathematic Operators ---- *)

    pred == 1 - ;
    succ == 1 + ;
    or   ==[pop true][id] branch;
    and == [id][pop false] branch;
    not == false true choice;
    xor == dup2 or rollup and not and;

(* -----List Operators  needing Combinators above ---- *)

    # TODO: zip
    sum == 0.0 swap[+] step;
    product == 1.0 swap[*] step;
    second == rest first;
    third == rest second;
    quote == [] cons;
    leaf == list not;

    (* drop take at of
     * These four binary operators expect an aggregate and a number.
     * That number is used for zero indexing into the aggregate.
     * The dropand take operators both expect an aggregate A and above that a number N.
     * The drop operator returns an aggragate like A except that the first N elements have been removed.
     * The take operator returns an aggregate like A except that only the first N elements have been retained.
     * The at operator expects the aggregate A and above that a number N, it returns that member of the aggregate which is at the Nth position in the aggregate.
     * The of operator expects a number N and above that an aggregate A, it returns the Nth member of A.
     * So the two operators (of/at) are converses of each other.
     * For all four operators in the case of sequences the sequence ordering is used, and for sets the underlying ordering is used.
     *)
    drop == [rest] times;

    take == 
        [[string][""] [[]] ifte] dip 
        swapd
        [dup first swap rest[swap cons] dip]
        times
        pop reverse;

    at == drop first;
    of == swap at;

(* - - - - - IO Operators  - - - - *)

    BEL == '\007;   # bell
    BS == '\008;    # backspace [\b]
    HT == 9 chr;  # horizontal tab [\t]
    LF == 10 chr;  # line feed [\n]
    VT == 11 chr;  # vertical tab
    FF == 12 chr;  # form feed [\f]
    CR == 13 chr;  # carriage return [\r]
    
    putchars == [putch] step;

    to-upper == ['a >=] [32 -] [] ifte;
    to-lower == ['a < ] [32 +] [] ifte;

(* ----- Date & Time ----- *)

    weekdays == ["Monday" "Tuesday" "Wednesday" "Thursday" "Friday" "Saturday" "Sunday"];
    months == ["JAN" "FEB" "MAR" "APR" "MAY" "JUN" "JUL" "AUG" "SEP" "OCT" "NOV" "DEC"];
(*
    localtime-strings ==
        time localtime
        [[ 0 at 'd 4 4 format ]
        [1 at pred months of]
        [2 at 'd 2 2 format	]
        [3 at 'd 2 2 format	]
        [4 at 'd 2 2 format	]
        [5 at 'd 2 2 format	]
        [6 at[]["true"]["false"] ifte]
        [7 at 'd 5 5 format	]
        [8 at pred weekdays of]]
        [i] map
        popd;

    today ==
        localtime-strings
        [[8 at][" "][2 at]["-"][1 at]["-"][0 at rest rest]]
        [i] map
        popd
        ""[concat] fold;
    
    now ==
        localtime-strings
        3 drop
        [[0 at][":"][1 at][":"][2 at]]
        [i] map
        popd
        ""[concat] fold;
    
   show-todaynow ==
        today putchars space now putchars newline;
*)

END

"inilib is loaded" putchars LF putch.

